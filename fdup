#!/usr/bin/env bash
# GNU bash, version 4.3.11(1)-release (x86_64-unknown-linux-gnu)
#
# © Copyright 2014 Ryan Delaney. All rights reserved.
# This work is distributed WITHOUT ANY WARRANTY whatsoever; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the README file for additional terms and conditions on your use of this
# software.
#
# TODO: Find Duplicate Files (based on size first, then CRC hash)
#
# Functions {{{1
verbose() {
  if [[ "$verbose" = "1" ]]; then
    echo "$1" >&2
  fi
}

error() {
  echo "$1" >&2
}

inodes() {
  [[ -f "$1" ]] && stat --format='%i %h %n' "$1" || error "WARNNING: File not found: $1"
}
# }}}
# Usage {{{1
#
usage() {
cat <<EOD
fdupes
© Copyright 2014 Ryan Delaney. All rights reserved.
Web site: http://github.com/rpdelaney

fdupes finds duplicate files in a directory according to md5sum

Usage: fdupes [OPTION] [PATH]

Options
  -?, --help                  print this help and exit
  -v, --verbose               increase verbosity
  -r, --recursive             search recursively
EOD
exit 1
}
# }}}
# Parameters {{{1
#
while :
do
  case $1 in
    --help | -\?)
      usage
      exit 0
      ;;
    -v | --verbose)
      # Each instance of -v adds 1 to verbosity
      local verbose=$((verbose+1))
      shift
      ;;
    -r | --recursive)
      recursive="1"
      shift
      ;;
    --) # End of all options
      shift
      break
      ;;
    -*)
      echo "FATAL: Unknown option : $1" >&2
      exit 1
      shift
      ;;
    *)  # no more options. Stop while loop
      break
      ;;
  esac
done

haystack="$1"
# }}}
# Dependencies {{{1
if [[ ! -d "$haystack" ]]; then error "FATAL: directory not found: $haystack" && exit 1; fi
if ! type md5sum &> /dev/null; then error "FATAL: missing dependency: md5sum" && exit 1; fi
if ! type find &> /dev/null; then echo "ERROR: Missing dependency: find" 1>&2; exit 1; fi
if ! type stat &> /dev/null; then echo "ERROR: Missing dependency: stat" 1>&2; exit 1; fi
# }}}
# Work {{{1
cd "$haystack"

# Perform file size comparison {{{2
# Files that do not have matching file sizes are not duplicates
while read file; do
  stat --format="%s##%n" "$file"
done < <(find . -type f) | sort -g
exit 0
# }}}
[[ ! -f fdupes.crc ]] && cfv -rr -t crc -f fdupes.crc -C # || { error "FATAL: fdupes: CRC checking failed." ; exit 1 ; }

dupes="$(grep -Po '[a-z0-9]{8}[ ]*$' fdupes.crc | awk 'seen[$0]++')"

for crc in $dupes; do grep "$crc" fdupes.crc && echo "--"; done

# }}}

# vim: ft=sh foldmethod=marker:
