#!/usr/bin/env bash
# GNU bash, version 4.3.18(1)-release (x86_64-unknown-linux-gnu)
#
# Â© Copyright 2014 Ryan Delaney. All rights reserved.
# This work is distributed WITHOUT ANY WARRANTY whatsoever; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the README file for additional terms and conditions on your use of this
# software.

# Functions {{{1
# verbose() {{{2
verbose() {
  # $1 is the message to be printed
  local message="$1"
  # $2 is the verbosity threshold (default: 1)
  local threshold="$2"

  if [[ "$verbose" -ge "$threshold" ]] && [[ -z "$quiet" ]]; then
    echo "$message" >&2 || return 1
  fi
}
# verbose() 2}}}
# error() {{{2
error() {
  #  is the message to be printed
  local message="$1"

  if [[ -z "$quiet" ]]; then
    echo "$message" >&2 || return 1
  fi
}
# error() 2}}}
# Functions 1}}}

# Parameters {{{1
#
while :
do
  case $1 in
    --help | -\?)
      usage
      exit 0
      ;;
    -v | --verbose)
      # Each instance of -v adds 1 to verbosity
      verbose=$((verbose+1))
      shift
      ;;
    --) # End of all options
      shift
      break
      ;;
    -*)
      echo "FATAL: Unknown option : $1" >&2
      exit 1
      shift
      ;;
    *)  # no more options. Stop while loop
      break
      ;;
  esac
done
# }}}

# Usage {{{1
usage() {
cat <<EOD
Usage: psx [OPTION]

Options
  -?, --help                  print this help and exit
  -v, --verbose               increase verbosity
EOD
exit 1
}
# Usage 1}}}

# Validation {{{1
if ! type pgrep &> /dev/null; then echo "ERROR: Missing dependency: pgrep" 1>&2; exit 1; fi
# 1}}}

word="$*"
pids="$(pgrep "$word")"

if [[ -n "$pids" ]]; then
  if [[ -z "$verbose" ]]; then
    # just get the pids
    echo "$pids"
  else
    tmpfile="$(mktemp)"
    {
      read line
      echo "$line" # > "$tmpfile"

      while read line; do
        echo "$line" >> "$tmpfile"
      done
    } < <( ps u --sort=uid,pid -p $pids )

    cols=${COLUMNS:="$(tput cols)"}

    if [[ "$verbose" -le 1 ]] && [[ -n "$cols" ]]; then
      # print the rest, with output trimmed to terminal width
      cut -c1-"$cols" "$tmpfile"
    else
      # print everything
      cat "$tmpfile"
    fi
  fi
fi


# vim: ft=sh foldmethod=marker:
