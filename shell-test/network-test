#!/usr/bin/env bash
#
# Â© Copyright 2014 Ryan Delaney. All rights reserved. This work is
# distributed WITHOUT ANY WARRANTY whatsoever; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# README file for terms and conditions on your use of this software.

# Usage {{{1
usage() {
cat <<EOD
network-test
Copyright (C) 2014 by Ryan Delaney. All rights reserved. network-test comes with
ABSOLUTELY NO WARRANTY.  This is free software, and you are welcome to
redistribute it under certain conditions.  See the GNU General Public Licence
version 3 for details.
Web site: http://github.com/rpdelaney

network-test performs some basic tests of local and wide-access internet connectivity.

Usage: network-test [OPTION]

Options
  -?, --help                  print this help and exit
  -v, --verbose               increase verbosity
EOD
exit 1
}
# }}}
# Parameters {{{1
while :
do
    case $1 in
        --help | -\?)
            #  Call your Help() or usage() function here.
            usage
            exit 0
            ;;
        -v | --verbose)
            # Each instance of -v adds 1 to verbosity
            verbose=$((verbose+1))
            shift
            ;;
        --) # End of all options
            shift
            break
            ;;
        -*)
            echo "WARN: Unknown option (ignored): $1" >&2
            shift
            ;;
        *)  # no more options. Stop while loop
            break
            ;;
    esac
done
# 1}}}
# Functions {{{1
shortping() { ping "$1" -q -c 5 -W 0.5 -i 0.2 -l 3 > /dev/null ; }
longping()  { ping "$1" -q -c 3 -W 1.0 -i 0.5 -l 3 > /dev/null ; }
verbose() { if [[ "$verbose" = "1" ]]; then echo "$1" ; fi ; }
error() { echo "$1" >&2 ; }
testcmd() { if timeout 5s "$@" &> /dev/null; then verbose "OK."; else verbose "FAIL"; fi ; }
# 1}}}

# Work
  # Check that dhcpcd is working and internet is up
verbose "localhost:"
testcmd shortping localhost

  # Check that we can ping the gateway
verbose "gatekeeper:"
if testcmd shortping gatekeeper; then
    # Check that the gateway has been rebooted within 48 hours (172800 seconds)
  if uptime="$(ssh -q gatekeeper cat /proc/uptime | tail -1 | cut -d"." -f1 -)" ; then
    if [[ uptime -ge 172800 ]]; then
      error "Gatekeeper uptime exceeded threshold: $uptime"
    fi
  else
    error "FATAL: Gatekeeper uptime could not be read."
  fi
fi

  # Check that we can ping the printer/scanner
verbose "epson:"
testcmd shortping epson

  # Check that we can ping google
verbose "google:"
testcmd shortping google.com

  # Check tor connections
verbose "tor:"
testcmd curl -s --socks5-hostname localhost:9050 http://www.http://3g2upl4pq6kufc4m.onion/

# vim: ft=sh foldmethod=marker:
