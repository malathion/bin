#!/usr/bin/env bash
# GNU bash, version 4.2.25(1)-release (x86_64-pc-linux-gnu)
#
# © Copyright 2014-03-07 Ryan Delaney. All rights reserved.
# This work is distributed WITHOUT ANY WARRANTY whatsoever; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the README file for additional terms and conditions on your use of this
# software.
#

#
# Usage {{{1
#
usage() {
cat <<EOD
susiebackup
© Copyright 2014-03-07 Ryan Delaney. All rights reserved.
Web site: http://github.com/rpdelaney

susiebackup backs up 'susie', a proprietary relational database in postgreSQL.
Dumps are compressed and, unless they are too large, emailed to RECIPIENT.

Usage: susiebackup [OPTION] RECIPIENT

Options
  -?, --help                  print this help and exit
  -v, --verbose               increase verbosity
EOD
exit 1
}

#
# Arguments {{{1
#
while :
do
  case $1 in
    --help | -\?)
      #  Call your Help() or usage() function here.
      usage
      exit 0
      ;;
    -v | --verbose)
      # Each instance of -v adds 1 to verbosity
      verbose=$((verbose+1))
      shift
      ;;
    --) # End of all options
      shift
      break
      ;;
    -*)
      echo "WARN: Unknown option (ignored): $1" >&2
      shift
      ;;
    *)  # no more options. Stop while loop
      break
      ;;
  esac
done


#
# Variables {{{1
#
dump_path="$HOME/backup/"
current_date="$(date +%Y-%m-%d__%H-%M-%S)"
backup_file="$dump_path$current_date.backup"
log_file="$dump_path$current_date.log"

if [[ -n "$1" ]]; then
  recipient="$1"
else
  recipient="ryan@sierrautility.net"
fi

  # check dependencies
if [[ ! -d "$dump_path" ]]; then
  printf "FATAL: Directory not found: $dump_path" | mutt "$recipient" -s "SUSIE backup failed"
  exit 1
fi

if ! type pg_dump &> /dev/null; then
  printf "$0: FATAL. pg_dump not found." | mutt "$recipient" -s "SUSIE backup failed"
  exit 1
fi

#
# Dump {{{1
#
echo "using backup file... $backup_file"
echo "using log file... $log_file"

echo "Executing pg_dump..."
pg_dump --host localhost --port 5432 --username "postgres" --format tar --encoding UTF8 --verbose --file $backup_file susie &>> "$log_file"
pgdump_exit="$?"
echo "pg_dump process returned exit code: $pgdump_exit" | tee --append "$log_file"

#
# Compress {{{1
#
if type xz &> /dev/null; then
  xz -v "$backup_file" && backup_file="$backup_file".xz
  xz -v "$log_file" && log_file="$log_file".xz
elif type bzip2 &> /dev/null; then
  bzip2 -v "$backup_file" && backup_file="$backup_file".bz2
  bzip2 -v "$log_file" && log_file="$log_file".bz2
else
  echo "$(realpath $0): FATAL. Archiver not found. The backup file could not be compressed, so it was not sent." | mutt "$recipient" -s "SUSIE backup failed"
  exit 1
fi

# Email {{{1

# Check size of the backup
#
# If larger than 8mb, don't try to email it

#
#
string1="Attachment $(file --brief --preserve-date --mime-type --mime-encoding -L $backup_file 2> /dev/null )"
string2="pg_dump process returned exit code: $pgdump_exit"

printf "$string1"'\r\n'"$string2"'\r\n' | mutt "$recipient" -s "SUSIE backup for $(date)" -a "$backup_file" "$log_file"

# }}}

# vim: ft=sh foldmethod=marker
