#!/usr/bin/env bash
#
# Displays a notification according to the battery level
#

# Dependencies
if ! type notify-send &> /dev/null; then echo "Missing dependency: notify-send" 1>&2; exit 1; fi
if ! pacman -Q libnotify &> /dev/null; then echo "Missing dependency: libnotify" 1>&2; exit 1; fi

split() {
  read -r line
  IFS="$*" read -r -a array <<< "$line"

  for element in "${array[@]}"
  do
    echo "$element"
  done
}

AC="$(acpi -a)"
ACPOWER="$(echo "$AC" | sed -r 's@Adapter 0: @@')"
BATT="$(acpi -b)"
if ! echo "$BATT" | grep -q "Full"; then
  BATTLVL="$(echo "$BATT" | grep -Po '[0-9]{2}' | head -n1)"
  BATTTIME="$(echo "$BATT" | grep -Po '\d{2}:\d{2}:\d{2}')"
  while read -r line; do
    if [[ -z $BATTHOUR ]]; then
      BATTHOUR="$line"
    elif [[ -z $BATTMIN ]]; then
      BATTMIN="$line"
    elif [[ -z $BATTSEC ]]; then
      BATTSEC="$line"
    else
      echo "Wtf happened?" 1>&2
      exit 1
    fi
  done < <(echo "$BATTTIME" | split :)
  TIMELEFT="${BATTHOUR}h ${BATTMIN}m ${BATTSEC}s"
else
  BATTLVL="100"
  BATTTIME="00:00:00"
  TIMELEFT="Full"
fi

# Battery icon {{{1
# Figure out which battery icon we should use, depending on criteria:
#   - Are we charging?
#   - What is the current battery level?
if [[ "$ACPOWER" == "on-line" ]]; then
  if [[ $BATTLVL -gt 80 ]]; then
    BATT_STATUS_ICON='battery-full-charging'
  elif [[ $BATTLVL -gt 50 ]]; then
    BATT_STATUS_ICON='battery-good-charging'
  elif [[ $BATTLVL -gt 20 ]]; then
    BATT_STATUS_ICON='battery-low-charging'
  else
    BATT_STATUS_ICON='battery-caution-charging'
  fi
else
  if [[ $BATTLVL -gt 80 ]]; then
    BATT_STATUS_ICON='battery-full'
  elif [[ $BATTLVL -gt 50 ]]; then
    BATT_STATUS_ICON='battery-good'
  elif [[ $BATTLVL -gt 20 ]]; then
    BATT_STATUS_ICON='battery-low'
  else
    BATT_STATUS_ICON='battery-caution'
  fi
fi
# Battery icon 1}}}
# Urgency {{{1
URGENCY=low
if [[ $ACPOWER != "on-line" ]] && [[ $BATTHOUR -lt 1 ]]; then
  if [[ $BATTMIN -lt 10 ]]; then
    URGENCY="critical"
  elif [[ $BATTMIN -lt 30 ]]; then
    URGENCY="normal"
  fi
fi
# Urgency 1}}}
# Thermal data {{{1
# Thermal 0: ok, 54.5 degrees C # acpi -t
THERMAL="$(acpi -t)"
THERMALTEMP="$(echo "$THERMAL" | grep -Po '[0-9.]+\.[0-9] degrees [CF]')"
if echo "$THERMAL" | grep -q 'ok,'; then
  THERMALOK=0
else
  THERMALOK=1
fi
# Thermal data 1}}}

# ICON_CRITICAL='messagebox_critical'
# ICON_WARNING='messagebox_warning'
# ICON_INFO='messagebox_info'

main() {
  if [[ $THERMALOK -ne 0 ]]; then
    notify-send "TEMPERATURE CRITICAL" "$THERMALTEMP" -u critical -i "$CRITICAL" || exit
  else
    notify-send "$BATTLVL"% "$TIMELEFT" -u "$URGENCY" -i "$BATT_STATUS_ICON" || exit
  fi
}

main

# EOF
