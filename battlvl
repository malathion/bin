#!/usr/bin/env bash
# GNU bash, version 4.4.23(1)-release (x86_64-apple-darwin17.5.0)
# vim: filetype=sh foldmethod=marker shiftwidth=2 expandtab softtabstop=4:
#
# Â© Copyright 2018 Ryan Delaney. All rights reserved.
# This work is distributed WITHOUT ANY WARRANTY whatsoever; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the README file for additional terms and conditions on your use of this
# software.
#
# reports the battery level
#
set -eu -o pipefail

# We do this weird dance with _self because of SC2155:
# https://github.com/koalaman/shellcheck/issues/731
_self="$(ostype)" ; declare -r _ostype="$_self" ; unset _self
declare -r discharging_icon="ðŸ”‹"
declare -r charging_icon="âš¡"
declare -r charged_icon="âœ…"
declare -r ac_icon="ðŸ”Œ"

_test_level_output() {
  values=(101 100 90 75 50 33 25 15 10 5 -1)
  for i in "${values[@]}"; do
    _print_level "$i"
    printf '\n'
  done
  exit 0
}

# shellcheck disable=SC2154
_print_level() {
  declare -r _level="$1"

  if [[ -s "$HOME"/.bash_styles ]] ; then
    set +u
    # shellcheck disable=SC1090
    source "$HOME"/.bash_styles
    set -u

    if [[ "$_level" -gt 100 ]] ; then
      # error state, battery can't be > 100%
      local color="$bgyellow$magenta$bold"
    elif [[ "$_level" -eq 100 ]] ; then
      local color="$bggreen$white"
    elif [[ "$_level" -ge 75 ]] ; then
      local color="$green$bold"
    elif [[ "$_level" -ge 50 ]] ; then
      local color="$cyan$bold"
    elif [[ "$_level" -ge 33 ]] ; then
      local color="$yellow$bold"
    elif [[ "$_level" -ge 25 ]] ; then
      local color="$red$bold"
    elif [[ "$_level" -ge 15 ]] ; then
      local color="$bgred$white"
    elif [[ "$_level" -ge 0 ]] ; then
      local color="$bgred$yellow$bold"
    elif [[ "$_level" -lt 0 ]] ; then
      # error state, battery can't be < 0%
      local color="$bgyellow$magenta$bold"
    fi
  fi
  color="$color"
  printf "%s%s%%%s" "$color" "$_level" "$reset"
}

_macos_battlvl() {
  # Print the battlvl assuming we are on macos
  declare -r batt_num="${1:-0}"

  if ! command -v pmset >/dev/null 2>&1 ; then echo "Missing dependency: pmset" 1>&2 ; return 1 ; fi

  state="$(pmset -g batt | grep 'InternalBattery-'"$batt_num")"

  # state='-InternalBattery-0 (id=4063331)        50%; charging; 2:14 remaining present: true'
  # state='-InternalBattery-0 (id=4063331)        51%; AC attached; not charging present: true'
  # state='-InternalBattery-0 (id=4063331)        51%; charging; (no estimate) present: true'
  # state='-InternalBattery-0 (id=4063331)        51%; charging; 2:23 remaining present: true'
  # state='-InternalBattery-0 (id=4063331)        100%; charged; 0:00 remaining present: true'
  # state='-InternalBattery-0 (id=4063331)        0%; discharging; 0:00 remaining present: true'

  _self="$(grep -Po '[\d]{1,3}%' <<< "$state")" ; declare -r level_pct="$_self" ; unset _self
  _self="${level_pct/\%/}"                      ; declare -r level="$_self"     ; unset _self

  case "$state" in
    *"discharging;"* )
      declare -r status="$discharging_icon"
      ;;
    *"AC attached;"*)
      declare -r status="$ac_icon"
      ;;
    *"not charging"*)
      declare -r status="$discharging_icon"
      ;;
    *"charging;"*)
      declare -r status="$charging_icon"
      ;;
    *"charged;"*)
      declare -r status="$charged_icon"
      ;;
  esac

  case "$state" in
    *"(no estimate)"*)
      declare -r estimate="(no estimate)"
      ;;
    *"0:00 remaining"*)
      declare -r estimate=""
      ;;
    *"remaining"*)
      _self="$(grep -Po '(\d{1,2}:){1,2}\d{1,2}')" <<< "$state" ; declare -r estimate="$_self" ; unset _self
  esac

  # Print the output

# printf "%s " "$state"
  _print_level "$level"
  printf "%s " "$status"
  printf "%s " "$estimate"
  printf '\n'
}

_nix_battlvl() {
  echo "UNIMPLEMENTED"
  return 0
  if ! command -v acpi >/dev/null 2>&1 ; then echo "Missing dependency: acpi" 1>&2 ; return 1 ; fi
  acpi
}

main() {
  case "$_ostype" in
    "macos")
      _macos_battlvl "$@" || return $?
      ;;
    "linux" | "bsd")
      _nix_battlvl "$@" || return $?
      ;;
  esac
}

main "$@"
exit $?

# EOF
